#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GastroCommerceRepository
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="GastroCommerce")]
	public partial class DataLayerDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Definiciones de métodos de extensibilidad
    partial void OnCreated();
    partial void InsertBackupHistories(BackupHistories instance);
    partial void UpdateBackupHistories(BackupHistories instance);
    partial void DeleteBackupHistories(BackupHistories instance);
    partial void InsertUsers(Users instance);
    partial void UpdateUsers(Users instance);
    partial void DeleteUsers(Users instance);
    partial void InsertBoxes(Boxes instance);
    partial void UpdateBoxes(Boxes instance);
    partial void DeleteBoxes(Boxes instance);
    partial void InsertCommanders(Commanders instance);
    partial void UpdateCommanders(Commanders instance);
    partial void DeleteCommanders(Commanders instance);
    partial void InsertDeliveries(Deliveries instance);
    partial void UpdateDeliveries(Deliveries instance);
    partial void DeleteDeliveries(Deliveries instance);
    partial void InsertDiscounts(Discounts instance);
    partial void UpdateDiscounts(Discounts instance);
    partial void DeleteDiscounts(Discounts instance);
    partial void InsertDiscountTypes(DiscountTypes instance);
    partial void UpdateDiscountTypes(DiscountTypes instance);
    partial void DeleteDiscountTypes(DiscountTypes instance);
    partial void InsertFunctions(Functions instance);
    partial void UpdateFunctions(Functions instance);
    partial void DeleteFunctions(Functions instance);
    partial void InsertIngredients(Ingredients instance);
    partial void UpdateIngredients(Ingredients instance);
    partial void DeleteIngredients(Ingredients instance);
    partial void InsertIngredients_Categories(Ingredients_Categories instance);
    partial void UpdateIngredients_Categories(Ingredients_Categories instance);
    partial void DeleteIngredients_Categories(Ingredients_Categories instance);
    partial void InsertNotifications(Notifications instance);
    partial void UpdateNotifications(Notifications instance);
    partial void DeleteNotifications(Notifications instance);
    partial void InsertOrders(Orders instance);
    partial void UpdateOrders(Orders instance);
    partial void DeleteOrders(Orders instance);
    partial void InsertOrders_Discounts(Orders_Discounts instance);
    partial void UpdateOrders_Discounts(Orders_Discounts instance);
    partial void DeleteOrders_Discounts(Orders_Discounts instance);
    partial void InsertOrders_Products(Orders_Products instance);
    partial void UpdateOrders_Products(Orders_Products instance);
    partial void DeleteOrders_Products(Orders_Products instance);
    partial void InsertPaymentMeans(PaymentMeans instance);
    partial void UpdatePaymentMeans(PaymentMeans instance);
    partial void DeletePaymentMeans(PaymentMeans instance);
    partial void InsertPayments(Payments instance);
    partial void UpdatePayments(Payments instance);
    partial void DeletePayments(Payments instance);
    partial void InsertProducts(Products instance);
    partial void UpdateProducts(Products instance);
    partial void DeleteProducts(Products instance);
    partial void InsertProducts_Categories(Products_Categories instance);
    partial void UpdateProducts_Categories(Products_Categories instance);
    partial void DeleteProducts_Categories(Products_Categories instance);
    partial void InsertProducts_Ingredients(Products_Ingredients instance);
    partial void UpdateProducts_Ingredients(Products_Ingredients instance);
    partial void DeleteProducts_Ingredients(Products_Ingredients instance);
    partial void InsertProducts_Relations(Products_Relations instance);
    partial void UpdateProducts_Relations(Products_Relations instance);
    partial void DeleteProducts_Relations(Products_Relations instance);
    partial void InsertProfiles(Profiles instance);
    partial void UpdateProfiles(Profiles instance);
    partial void DeleteProfiles(Profiles instance);
    partial void InsertProfiles_Functions(Profiles_Functions instance);
    partial void UpdateProfiles_Functions(Profiles_Functions instance);
    partial void DeleteProfiles_Functions(Profiles_Functions instance);
    partial void InsertRooms(Rooms instance);
    partial void UpdateRooms(Rooms instance);
    partial void DeleteRooms(Rooms instance);
    partial void InsertStats(Stats instance);
    partial void UpdateStats(Stats instance);
    partial void DeleteStats(Stats instance);
    partial void InsertSuppliers(Suppliers instance);
    partial void UpdateSuppliers(Suppliers instance);
    partial void DeleteSuppliers(Suppliers instance);
    partial void InsertSuppliersTransactions(SuppliersTransactions instance);
    partial void UpdateSuppliersTransactions(SuppliersTransactions instance);
    partial void DeleteSuppliersTransactions(SuppliersTransactions instance);
    partial void InsertSuppliersTransactions_Ingredients(SuppliersTransactions_Ingredients instance);
    partial void UpdateSuppliersTransactions_Ingredients(SuppliersTransactions_Ingredients instance);
    partial void DeleteSuppliersTransactions_Ingredients(SuppliersTransactions_Ingredients instance);
    partial void InsertSuppliersTransactions_Products(SuppliersTransactions_Products instance);
    partial void UpdateSuppliersTransactions_Products(SuppliersTransactions_Products instance);
    partial void DeleteSuppliersTransactions_Products(SuppliersTransactions_Products instance);
    partial void InsertTables(Tables instance);
    partial void UpdateTables(Tables instance);
    partial void DeleteTables(Tables instance);
    partial void InsertTickets(Tickets instance);
    partial void UpdateTickets(Tickets instance);
    partial void DeleteTickets(Tickets instance);
    partial void InsertTicketTypes(TicketTypes instance);
    partial void UpdateTicketTypes(TicketTypes instance);
    partial void DeleteTicketTypes(TicketTypes instance);
    #endregion
		
		public DataLayerDataContext() : 
				base(global::GastroCommerceRepository.Properties.Settings.Default.GastroCommerceConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataLayerDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataLayerDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataLayerDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataLayerDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<BackupHistories> BackupHistories
		{
			get
			{
				return this.GetTable<BackupHistories>();
			}
		}
		
		public System.Data.Linq.Table<Users> Users
		{
			get
			{
				return this.GetTable<Users>();
			}
		}
		
		public System.Data.Linq.Table<Boxes> Boxes
		{
			get
			{
				return this.GetTable<Boxes>();
			}
		}
		
		public System.Data.Linq.Table<Commanders> Commanders
		{
			get
			{
				return this.GetTable<Commanders>();
			}
		}
		
		public System.Data.Linq.Table<Deliveries> Deliveries
		{
			get
			{
				return this.GetTable<Deliveries>();
			}
		}
		
		public System.Data.Linq.Table<Discounts> Discounts
		{
			get
			{
				return this.GetTable<Discounts>();
			}
		}
		
		public System.Data.Linq.Table<DiscountTypes> DiscountTypes
		{
			get
			{
				return this.GetTable<DiscountTypes>();
			}
		}
		
		public System.Data.Linq.Table<Functions> Functions
		{
			get
			{
				return this.GetTable<Functions>();
			}
		}
		
		public System.Data.Linq.Table<Ingredients> Ingredients
		{
			get
			{
				return this.GetTable<Ingredients>();
			}
		}
		
		public System.Data.Linq.Table<Ingredients_Categories> Ingredients_Categories
		{
			get
			{
				return this.GetTable<Ingredients_Categories>();
			}
		}
		
		public System.Data.Linq.Table<Notifications> Notifications
		{
			get
			{
				return this.GetTable<Notifications>();
			}
		}
		
		public System.Data.Linq.Table<Orders> Orders
		{
			get
			{
				return this.GetTable<Orders>();
			}
		}
		
		public System.Data.Linq.Table<Orders_Discounts> Orders_Discounts
		{
			get
			{
				return this.GetTable<Orders_Discounts>();
			}
		}
		
		public System.Data.Linq.Table<Orders_Products> Orders_Products
		{
			get
			{
				return this.GetTable<Orders_Products>();
			}
		}
		
		public System.Data.Linq.Table<PaymentMeans> PaymentMeans
		{
			get
			{
				return this.GetTable<PaymentMeans>();
			}
		}
		
		public System.Data.Linq.Table<Payments> Payments
		{
			get
			{
				return this.GetTable<Payments>();
			}
		}
		
		public System.Data.Linq.Table<Products> Products
		{
			get
			{
				return this.GetTable<Products>();
			}
		}
		
		public System.Data.Linq.Table<Products_Categories> Products_Categories
		{
			get
			{
				return this.GetTable<Products_Categories>();
			}
		}
		
		public System.Data.Linq.Table<Products_Ingredients> Products_Ingredients
		{
			get
			{
				return this.GetTable<Products_Ingredients>();
			}
		}
		
		public System.Data.Linq.Table<Products_Relations> Products_Relations
		{
			get
			{
				return this.GetTable<Products_Relations>();
			}
		}
		
		public System.Data.Linq.Table<Profiles> Profiles
		{
			get
			{
				return this.GetTable<Profiles>();
			}
		}
		
		public System.Data.Linq.Table<Profiles_Functions> Profiles_Functions
		{
			get
			{
				return this.GetTable<Profiles_Functions>();
			}
		}
		
		public System.Data.Linq.Table<Rooms> Rooms
		{
			get
			{
				return this.GetTable<Rooms>();
			}
		}
		
		public System.Data.Linq.Table<Stats> Stats
		{
			get
			{
				return this.GetTable<Stats>();
			}
		}
		
		public System.Data.Linq.Table<Suppliers> Suppliers
		{
			get
			{
				return this.GetTable<Suppliers>();
			}
		}
		
		public System.Data.Linq.Table<SuppliersTransactions> SuppliersTransactions
		{
			get
			{
				return this.GetTable<SuppliersTransactions>();
			}
		}
		
		public System.Data.Linq.Table<SuppliersTransactions_Ingredients> SuppliersTransactions_Ingredients
		{
			get
			{
				return this.GetTable<SuppliersTransactions_Ingredients>();
			}
		}
		
		public System.Data.Linq.Table<SuppliersTransactions_Products> SuppliersTransactions_Products
		{
			get
			{
				return this.GetTable<SuppliersTransactions_Products>();
			}
		}
		
		public System.Data.Linq.Table<Tables> Tables
		{
			get
			{
				return this.GetTable<Tables>();
			}
		}
		
		public System.Data.Linq.Table<Tickets> Tickets
		{
			get
			{
				return this.GetTable<Tickets>();
			}
		}
		
		public System.Data.Linq.Table<TicketTypes> TicketTypes
		{
			get
			{
				return this.GetTable<TicketTypes>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BackupHistories")]
	public partial class BackupHistories : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BackupHistory_id;
		
		private System.DateTime _DateTime;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBackupHistory_idChanging(int value);
    partial void OnBackupHistory_idChanged();
    partial void OnDateTimeChanging(System.DateTime value);
    partial void OnDateTimeChanged();
    #endregion
		
		public BackupHistories()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BackupHistory_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BackupHistory_id
		{
			get
			{
				return this._BackupHistory_id;
			}
			set
			{
				if ((this._BackupHistory_id != value))
				{
					this.OnBackupHistory_idChanging(value);
					this.SendPropertyChanging();
					this._BackupHistory_id = value;
					this.SendPropertyChanged("BackupHistory_id");
					this.OnBackupHistory_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateTime", DbType="DateTime NOT NULL")]
		public System.DateTime DateTime
		{
			get
			{
				return this._DateTime;
			}
			set
			{
				if ((this._DateTime != value))
				{
					this.OnDateTimeChanging(value);
					this.SendPropertyChanging();
					this._DateTime = value;
					this.SendPropertyChanged("DateTime");
					this.OnDateTimeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class Users : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _User_id;
		
		private string _UserName;
		
		private string _Password;
		
		private string _Name;
		
		private string _LastName;
		
		private string _DNI;
		
		private string _Phone;
		
		private string _Address;
		
		private int _Profile_id;
		
		private EntitySet<Orders> _Orders;
		
		private EntityRef<Profiles> _Profiles;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUser_idChanging(int value);
    partial void OnUser_idChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnDNIChanging(string value);
    partial void OnDNIChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnProfile_idChanging(int value);
    partial void OnProfile_idChanged();
    #endregion
		
		public Users()
		{
			this._Orders = new EntitySet<Orders>(new Action<Orders>(this.attach_Orders), new Action<Orders>(this.detach_Orders));
			this._Profiles = default(EntityRef<Profiles>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int User_id
		{
			get
			{
				return this._User_id;
			}
			set
			{
				if ((this._User_id != value))
				{
					this.OnUser_idChanging(value);
					this.SendPropertyChanging();
					this._User_id = value;
					this.SendPropertyChanged("User_id");
					this.OnUser_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DNI", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string DNI
		{
			get
			{
				return this._DNI;
			}
			set
			{
				if ((this._DNI != value))
				{
					this.OnDNIChanging(value);
					this.SendPropertyChanging();
					this._DNI = value;
					this.SendPropertyChanged("DNI");
					this.OnDNIChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(50)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(50)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Profile_id", DbType="Int NOT NULL")]
		public int Profile_id
		{
			get
			{
				return this._Profile_id;
			}
			set
			{
				if ((this._Profile_id != value))
				{
					if (this._Profiles.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProfile_idChanging(value);
					this.SendPropertyChanging();
					this._Profile_id = value;
					this.SendPropertyChanged("Profile_id");
					this.OnProfile_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_Orders", Storage="_Orders", ThisKey="User_id", OtherKey="User_id")]
		public EntitySet<Orders> Orders
		{
			get
			{
				return this._Orders;
			}
			set
			{
				this._Orders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Profiles_Users", Storage="_Profiles", ThisKey="Profile_id", OtherKey="Profile_id", IsForeignKey=true)]
		public Profiles Profiles
		{
			get
			{
				return this._Profiles.Entity;
			}
			set
			{
				Profiles previousValue = this._Profiles.Entity;
				if (((previousValue != value) 
							|| (this._Profiles.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Profiles.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._Profiles.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._Profile_id = value.Profile_id;
					}
					else
					{
						this._Profile_id = default(int);
					}
					this.SendPropertyChanged("Profiles");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Orders(Orders entity)
		{
			this.SendPropertyChanging();
			entity.Users = this;
		}
		
		private void detach_Orders(Orders entity)
		{
			this.SendPropertyChanging();
			entity.Users = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Boxes")]
	public partial class Boxes : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Box_id;
		
		private string _Name;
		
		private EntitySet<Orders> _Orders;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBox_idChanging(int value);
    partial void OnBox_idChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Boxes()
		{
			this._Orders = new EntitySet<Orders>(new Action<Orders>(this.attach_Orders), new Action<Orders>(this.detach_Orders));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Box_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Box_id
		{
			get
			{
				return this._Box_id;
			}
			set
			{
				if ((this._Box_id != value))
				{
					this.OnBox_idChanging(value);
					this.SendPropertyChanging();
					this._Box_id = value;
					this.SendPropertyChanged("Box_id");
					this.OnBox_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Boxes_Orders", Storage="_Orders", ThisKey="Box_id", OtherKey="Box_id")]
		public EntitySet<Orders> Orders
		{
			get
			{
				return this._Orders;
			}
			set
			{
				this._Orders.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Orders(Orders entity)
		{
			this.SendPropertyChanging();
			entity.Boxes = this;
		}
		
		private void detach_Orders(Orders entity)
		{
			this.SendPropertyChanging();
			entity.Boxes = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Commanders")]
	public partial class Commanders : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Commander_id;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCommander_idChanging(int value);
    partial void OnCommander_idChanged();
    #endregion
		
		public Commanders()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Commander_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Commander_id
		{
			get
			{
				return this._Commander_id;
			}
			set
			{
				if ((this._Commander_id != value))
				{
					this.OnCommander_idChanging(value);
					this.SendPropertyChanging();
					this._Commander_id = value;
					this.SendPropertyChanged("Commander_id");
					this.OnCommander_idChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Deliveries")]
	public partial class Deliveries : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Delivery_id;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDelivery_idChanging(int value);
    partial void OnDelivery_idChanged();
    #endregion
		
		public Deliveries()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Delivery_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Delivery_id
		{
			get
			{
				return this._Delivery_id;
			}
			set
			{
				if ((this._Delivery_id != value))
				{
					this.OnDelivery_idChanging(value);
					this.SendPropertyChanging();
					this._Delivery_id = value;
					this.SendPropertyChanged("Delivery_id");
					this.OnDelivery_idChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Discounts")]
	public partial class Discounts : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Discount_id;
		
		private string _Name;
		
		private int _DiscountType_id;
		
		private EntitySet<Orders_Discounts> _Orders_Discounts;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDiscount_idChanging(int value);
    partial void OnDiscount_idChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDiscountType_idChanging(int value);
    partial void OnDiscountType_idChanged();
    #endregion
		
		public Discounts()
		{
			this._Orders_Discounts = new EntitySet<Orders_Discounts>(new Action<Orders_Discounts>(this.attach_Orders_Discounts), new Action<Orders_Discounts>(this.detach_Orders_Discounts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Discount_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Discount_id
		{
			get
			{
				return this._Discount_id;
			}
			set
			{
				if ((this._Discount_id != value))
				{
					this.OnDiscount_idChanging(value);
					this.SendPropertyChanging();
					this._Discount_id = value;
					this.SendPropertyChanged("Discount_id");
					this.OnDiscount_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DiscountType_id", DbType="Int NOT NULL")]
		public int DiscountType_id
		{
			get
			{
				return this._DiscountType_id;
			}
			set
			{
				if ((this._DiscountType_id != value))
				{
					this.OnDiscountType_idChanging(value);
					this.SendPropertyChanging();
					this._DiscountType_id = value;
					this.SendPropertyChanged("DiscountType_id");
					this.OnDiscountType_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Discounts_Orders_Discounts", Storage="_Orders_Discounts", ThisKey="Discount_id", OtherKey="Discount_id")]
		public EntitySet<Orders_Discounts> Orders_Discounts
		{
			get
			{
				return this._Orders_Discounts;
			}
			set
			{
				this._Orders_Discounts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Orders_Discounts(Orders_Discounts entity)
		{
			this.SendPropertyChanging();
			entity.Discounts = this;
		}
		
		private void detach_Orders_Discounts(Orders_Discounts entity)
		{
			this.SendPropertyChanging();
			entity.Discounts = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DiscountTypes")]
	public partial class DiscountTypes : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DiscountType_id;
		
		private string _Name;
		
		private double _Percentage;
		
		private double _Amount;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDiscountType_idChanging(int value);
    partial void OnDiscountType_idChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPercentageChanging(double value);
    partial void OnPercentageChanged();
    partial void OnAmountChanging(double value);
    partial void OnAmountChanged();
    #endregion
		
		public DiscountTypes()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DiscountType_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DiscountType_id
		{
			get
			{
				return this._DiscountType_id;
			}
			set
			{
				if ((this._DiscountType_id != value))
				{
					this.OnDiscountType_idChanging(value);
					this.SendPropertyChanging();
					this._DiscountType_id = value;
					this.SendPropertyChanged("DiscountType_id");
					this.OnDiscountType_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Percentage", DbType="Float NOT NULL")]
		public double Percentage
		{
			get
			{
				return this._Percentage;
			}
			set
			{
				if ((this._Percentage != value))
				{
					this.OnPercentageChanging(value);
					this.SendPropertyChanging();
					this._Percentage = value;
					this.SendPropertyChanged("Percentage");
					this.OnPercentageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Float NOT NULL")]
		public double Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Functions")]
	public partial class Functions : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Function_id;
		
		private string _Title;
		
		private EntitySet<Profiles_Functions> _Profiles_Functions;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFunction_idChanging(int value);
    partial void OnFunction_idChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    #endregion
		
		public Functions()
		{
			this._Profiles_Functions = new EntitySet<Profiles_Functions>(new Action<Profiles_Functions>(this.attach_Profiles_Functions), new Action<Profiles_Functions>(this.detach_Profiles_Functions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Function_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Function_id
		{
			get
			{
				return this._Function_id;
			}
			set
			{
				if ((this._Function_id != value))
				{
					this.OnFunction_idChanging(value);
					this.SendPropertyChanging();
					this._Function_id = value;
					this.SendPropertyChanged("Function_id");
					this.OnFunction_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Functions_Profiles_Functions", Storage="_Profiles_Functions", ThisKey="Function_id", OtherKey="Function_id")]
		public EntitySet<Profiles_Functions> Profiles_Functions
		{
			get
			{
				return this._Profiles_Functions;
			}
			set
			{
				this._Profiles_Functions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Profiles_Functions(Profiles_Functions entity)
		{
			this.SendPropertyChanging();
			entity.Functions = this;
		}
		
		private void detach_Profiles_Functions(Profiles_Functions entity)
		{
			this.SendPropertyChanging();
			entity.Functions = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Ingredients")]
	public partial class Ingredients : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Ingredient_id;
		
		private string _Name;
		
		private int _Ingredient_Category_id;
		
		private EntitySet<Products_Ingredients> _Products_Ingredients;
		
		private EntitySet<SuppliersTransactions_Ingredients> _SuppliersTransactions_Ingredients;
		
		private EntityRef<Ingredients_Categories> _Ingredients_Categories;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIngredient_idChanging(int value);
    partial void OnIngredient_idChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnIngredient_Category_idChanging(int value);
    partial void OnIngredient_Category_idChanged();
    #endregion
		
		public Ingredients()
		{
			this._Products_Ingredients = new EntitySet<Products_Ingredients>(new Action<Products_Ingredients>(this.attach_Products_Ingredients), new Action<Products_Ingredients>(this.detach_Products_Ingredients));
			this._SuppliersTransactions_Ingredients = new EntitySet<SuppliersTransactions_Ingredients>(new Action<SuppliersTransactions_Ingredients>(this.attach_SuppliersTransactions_Ingredients), new Action<SuppliersTransactions_Ingredients>(this.detach_SuppliersTransactions_Ingredients));
			this._Ingredients_Categories = default(EntityRef<Ingredients_Categories>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ingredient_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Ingredient_id
		{
			get
			{
				return this._Ingredient_id;
			}
			set
			{
				if ((this._Ingredient_id != value))
				{
					this.OnIngredient_idChanging(value);
					this.SendPropertyChanging();
					this._Ingredient_id = value;
					this.SendPropertyChanged("Ingredient_id");
					this.OnIngredient_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ingredient_Category_id", DbType="Int NOT NULL")]
		public int Ingredient_Category_id
		{
			get
			{
				return this._Ingredient_Category_id;
			}
			set
			{
				if ((this._Ingredient_Category_id != value))
				{
					if (this._Ingredients_Categories.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIngredient_Category_idChanging(value);
					this.SendPropertyChanging();
					this._Ingredient_Category_id = value;
					this.SendPropertyChanged("Ingredient_Category_id");
					this.OnIngredient_Category_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Ingredients_Products_Ingredients", Storage="_Products_Ingredients", ThisKey="Ingredient_id", OtherKey="Ingredient_id")]
		public EntitySet<Products_Ingredients> Products_Ingredients
		{
			get
			{
				return this._Products_Ingredients;
			}
			set
			{
				this._Products_Ingredients.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Ingredients_SuppliersTransactions_Ingredients", Storage="_SuppliersTransactions_Ingredients", ThisKey="Ingredient_id", OtherKey="Ingredient_id")]
		public EntitySet<SuppliersTransactions_Ingredients> SuppliersTransactions_Ingredients
		{
			get
			{
				return this._SuppliersTransactions_Ingredients;
			}
			set
			{
				this._SuppliersTransactions_Ingredients.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Ingredients_Categories_Ingredients", Storage="_Ingredients_Categories", ThisKey="Ingredient_Category_id", OtherKey="Ingredient_Category_id", IsForeignKey=true)]
		public Ingredients_Categories Ingredients_Categories
		{
			get
			{
				return this._Ingredients_Categories.Entity;
			}
			set
			{
				Ingredients_Categories previousValue = this._Ingredients_Categories.Entity;
				if (((previousValue != value) 
							|| (this._Ingredients_Categories.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Ingredients_Categories.Entity = null;
						previousValue.Ingredients.Remove(this);
					}
					this._Ingredients_Categories.Entity = value;
					if ((value != null))
					{
						value.Ingredients.Add(this);
						this._Ingredient_Category_id = value.Ingredient_Category_id;
					}
					else
					{
						this._Ingredient_Category_id = default(int);
					}
					this.SendPropertyChanged("Ingredients_Categories");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Products_Ingredients(Products_Ingredients entity)
		{
			this.SendPropertyChanging();
			entity.Ingredients = this;
		}
		
		private void detach_Products_Ingredients(Products_Ingredients entity)
		{
			this.SendPropertyChanging();
			entity.Ingredients = null;
		}
		
		private void attach_SuppliersTransactions_Ingredients(SuppliersTransactions_Ingredients entity)
		{
			this.SendPropertyChanging();
			entity.Ingredients = this;
		}
		
		private void detach_SuppliersTransactions_Ingredients(SuppliersTransactions_Ingredients entity)
		{
			this.SendPropertyChanging();
			entity.Ingredients = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Ingredients_Categories")]
	public partial class Ingredients_Categories : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Ingredient_Category_id;
		
		private string _Name;
		
		private EntitySet<Ingredients> _Ingredients;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIngredient_Category_idChanging(int value);
    partial void OnIngredient_Category_idChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Ingredients_Categories()
		{
			this._Ingredients = new EntitySet<Ingredients>(new Action<Ingredients>(this.attach_Ingredients), new Action<Ingredients>(this.detach_Ingredients));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ingredient_Category_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Ingredient_Category_id
		{
			get
			{
				return this._Ingredient_Category_id;
			}
			set
			{
				if ((this._Ingredient_Category_id != value))
				{
					this.OnIngredient_Category_idChanging(value);
					this.SendPropertyChanging();
					this._Ingredient_Category_id = value;
					this.SendPropertyChanged("Ingredient_Category_id");
					this.OnIngredient_Category_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Ingredients_Categories_Ingredients", Storage="_Ingredients", ThisKey="Ingredient_Category_id", OtherKey="Ingredient_Category_id")]
		public EntitySet<Ingredients> Ingredients
		{
			get
			{
				return this._Ingredients;
			}
			set
			{
				this._Ingredients.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Ingredients(Ingredients entity)
		{
			this.SendPropertyChanging();
			entity.Ingredients_Categories = this;
		}
		
		private void detach_Ingredients(Ingredients entity)
		{
			this.SendPropertyChanging();
			entity.Ingredients_Categories = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Notifications")]
	public partial class Notifications : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Notification_id;
		
		private System.DateTime _DateTime;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNotification_idChanging(int value);
    partial void OnNotification_idChanged();
    partial void OnDateTimeChanging(System.DateTime value);
    partial void OnDateTimeChanged();
    #endregion
		
		public Notifications()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Notification_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Notification_id
		{
			get
			{
				return this._Notification_id;
			}
			set
			{
				if ((this._Notification_id != value))
				{
					this.OnNotification_idChanging(value);
					this.SendPropertyChanging();
					this._Notification_id = value;
					this.SendPropertyChanged("Notification_id");
					this.OnNotification_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateTime", DbType="DateTime NOT NULL")]
		public System.DateTime DateTime
		{
			get
			{
				return this._DateTime;
			}
			set
			{
				if ((this._DateTime != value))
				{
					this.OnDateTimeChanging(value);
					this.SendPropertyChanging();
					this._DateTime = value;
					this.SendPropertyChanged("DateTime");
					this.OnDateTimeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Orders")]
	public partial class Orders : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Order_id;
		
		private System.DateTime _DateTime;
		
		private System.Nullable<double> _TotalAmount;
		
		private System.Nullable<int> _User_id;
		
		private int _Table_id;
		
		private System.Nullable<int> _Box_id;
		
		private EntitySet<Orders_Discounts> _Orders_Discounts;
		
		private EntitySet<Orders_Products> _Orders_Products;
		
		private EntitySet<Payments> _Payments;
		
		private EntitySet<Tickets> _Tickets;
		
		private EntityRef<Boxes> _Boxes;
		
		private EntityRef<Users> _Users;
		
		private EntityRef<Tables> _Tables;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrder_idChanging(int value);
    partial void OnOrder_idChanged();
    partial void OnDateTimeChanging(System.DateTime value);
    partial void OnDateTimeChanged();
    partial void OnTotalAmountChanging(System.Nullable<double> value);
    partial void OnTotalAmountChanged();
    partial void OnUser_idChanging(System.Nullable<int> value);
    partial void OnUser_idChanged();
    partial void OnTable_idChanging(int value);
    partial void OnTable_idChanged();
    partial void OnBox_idChanging(System.Nullable<int> value);
    partial void OnBox_idChanged();
    #endregion
		
		public Orders()
		{
			this._Orders_Discounts = new EntitySet<Orders_Discounts>(new Action<Orders_Discounts>(this.attach_Orders_Discounts), new Action<Orders_Discounts>(this.detach_Orders_Discounts));
			this._Orders_Products = new EntitySet<Orders_Products>(new Action<Orders_Products>(this.attach_Orders_Products), new Action<Orders_Products>(this.detach_Orders_Products));
			this._Payments = new EntitySet<Payments>(new Action<Payments>(this.attach_Payments), new Action<Payments>(this.detach_Payments));
			this._Tickets = new EntitySet<Tickets>(new Action<Tickets>(this.attach_Tickets), new Action<Tickets>(this.detach_Tickets));
			this._Boxes = default(EntityRef<Boxes>);
			this._Users = default(EntityRef<Users>);
			this._Tables = default(EntityRef<Tables>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Order_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Order_id
		{
			get
			{
				return this._Order_id;
			}
			set
			{
				if ((this._Order_id != value))
				{
					this.OnOrder_idChanging(value);
					this.SendPropertyChanging();
					this._Order_id = value;
					this.SendPropertyChanged("Order_id");
					this.OnOrder_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateTime", DbType="DateTime NOT NULL")]
		public System.DateTime DateTime
		{
			get
			{
				return this._DateTime;
			}
			set
			{
				if ((this._DateTime != value))
				{
					this.OnDateTimeChanging(value);
					this.SendPropertyChanging();
					this._DateTime = value;
					this.SendPropertyChanged("DateTime");
					this.OnDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalAmount", DbType="Float")]
		public System.Nullable<double> TotalAmount
		{
			get
			{
				return this._TotalAmount;
			}
			set
			{
				if ((this._TotalAmount != value))
				{
					this.OnTotalAmountChanging(value);
					this.SendPropertyChanging();
					this._TotalAmount = value;
					this.SendPropertyChanged("TotalAmount");
					this.OnTotalAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_id", DbType="Int")]
		public System.Nullable<int> User_id
		{
			get
			{
				return this._User_id;
			}
			set
			{
				if ((this._User_id != value))
				{
					if (this._Users.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUser_idChanging(value);
					this.SendPropertyChanging();
					this._User_id = value;
					this.SendPropertyChanged("User_id");
					this.OnUser_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Table_id", DbType="Int NOT NULL")]
		public int Table_id
		{
			get
			{
				return this._Table_id;
			}
			set
			{
				if ((this._Table_id != value))
				{
					if (this._Tables.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTable_idChanging(value);
					this.SendPropertyChanging();
					this._Table_id = value;
					this.SendPropertyChanged("Table_id");
					this.OnTable_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Box_id", DbType="Int")]
		public System.Nullable<int> Box_id
		{
			get
			{
				return this._Box_id;
			}
			set
			{
				if ((this._Box_id != value))
				{
					if (this._Boxes.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBox_idChanging(value);
					this.SendPropertyChanging();
					this._Box_id = value;
					this.SendPropertyChanged("Box_id");
					this.OnBox_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Orders_Orders_Discounts", Storage="_Orders_Discounts", ThisKey="Order_id", OtherKey="Order_id")]
		public EntitySet<Orders_Discounts> Orders_Discounts
		{
			get
			{
				return this._Orders_Discounts;
			}
			set
			{
				this._Orders_Discounts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Orders_Orders_Products", Storage="_Orders_Products", ThisKey="Order_id", OtherKey="Order_id")]
		public EntitySet<Orders_Products> Orders_Products
		{
			get
			{
				return this._Orders_Products;
			}
			set
			{
				this._Orders_Products.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Orders_Payments", Storage="_Payments", ThisKey="Order_id", OtherKey="Order_id")]
		public EntitySet<Payments> Payments
		{
			get
			{
				return this._Payments;
			}
			set
			{
				this._Payments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Orders_Tickets", Storage="_Tickets", ThisKey="Order_id", OtherKey="Order_id")]
		public EntitySet<Tickets> Tickets
		{
			get
			{
				return this._Tickets;
			}
			set
			{
				this._Tickets.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Boxes_Orders", Storage="_Boxes", ThisKey="Box_id", OtherKey="Box_id", IsForeignKey=true)]
		public Boxes Boxes
		{
			get
			{
				return this._Boxes.Entity;
			}
			set
			{
				Boxes previousValue = this._Boxes.Entity;
				if (((previousValue != value) 
							|| (this._Boxes.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Boxes.Entity = null;
						previousValue.Orders.Remove(this);
					}
					this._Boxes.Entity = value;
					if ((value != null))
					{
						value.Orders.Add(this);
						this._Box_id = value.Box_id;
					}
					else
					{
						this._Box_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Boxes");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_Orders", Storage="_Users", ThisKey="User_id", OtherKey="User_id", IsForeignKey=true)]
		public Users Users
		{
			get
			{
				return this._Users.Entity;
			}
			set
			{
				Users previousValue = this._Users.Entity;
				if (((previousValue != value) 
							|| (this._Users.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Users.Entity = null;
						previousValue.Orders.Remove(this);
					}
					this._Users.Entity = value;
					if ((value != null))
					{
						value.Orders.Add(this);
						this._User_id = value.User_id;
					}
					else
					{
						this._User_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Users");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tables_Orders", Storage="_Tables", ThisKey="Table_id", OtherKey="Table_id", IsForeignKey=true)]
		public Tables Tables
		{
			get
			{
				return this._Tables.Entity;
			}
			set
			{
				Tables previousValue = this._Tables.Entity;
				if (((previousValue != value) 
							|| (this._Tables.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tables.Entity = null;
						previousValue.Orders.Remove(this);
					}
					this._Tables.Entity = value;
					if ((value != null))
					{
						value.Orders.Add(this);
						this._Table_id = value.Table_id;
					}
					else
					{
						this._Table_id = default(int);
					}
					this.SendPropertyChanged("Tables");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Orders_Discounts(Orders_Discounts entity)
		{
			this.SendPropertyChanging();
			entity.Orders = this;
		}
		
		private void detach_Orders_Discounts(Orders_Discounts entity)
		{
			this.SendPropertyChanging();
			entity.Orders = null;
		}
		
		private void attach_Orders_Products(Orders_Products entity)
		{
			this.SendPropertyChanging();
			entity.Orders = this;
		}
		
		private void detach_Orders_Products(Orders_Products entity)
		{
			this.SendPropertyChanging();
			entity.Orders = null;
		}
		
		private void attach_Payments(Payments entity)
		{
			this.SendPropertyChanging();
			entity.Orders = this;
		}
		
		private void detach_Payments(Payments entity)
		{
			this.SendPropertyChanging();
			entity.Orders = null;
		}
		
		private void attach_Tickets(Tickets entity)
		{
			this.SendPropertyChanging();
			entity.Orders = this;
		}
		
		private void detach_Tickets(Tickets entity)
		{
			this.SendPropertyChanging();
			entity.Orders = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Orders_Discounts")]
	public partial class Orders_Discounts : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Order_Discount_id;
		
		private int _Order_id;
		
		private int _Discount_id;
		
		private EntityRef<Discounts> _Discounts;
		
		private EntityRef<Orders> _Orders;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrder_Discount_idChanging(int value);
    partial void OnOrder_Discount_idChanged();
    partial void OnOrder_idChanging(int value);
    partial void OnOrder_idChanged();
    partial void OnDiscount_idChanging(int value);
    partial void OnDiscount_idChanged();
    #endregion
		
		public Orders_Discounts()
		{
			this._Discounts = default(EntityRef<Discounts>);
			this._Orders = default(EntityRef<Orders>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Order_Discount_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Order_Discount_id
		{
			get
			{
				return this._Order_Discount_id;
			}
			set
			{
				if ((this._Order_Discount_id != value))
				{
					this.OnOrder_Discount_idChanging(value);
					this.SendPropertyChanging();
					this._Order_Discount_id = value;
					this.SendPropertyChanged("Order_Discount_id");
					this.OnOrder_Discount_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Order_id", DbType="Int NOT NULL")]
		public int Order_id
		{
			get
			{
				return this._Order_id;
			}
			set
			{
				if ((this._Order_id != value))
				{
					if (this._Orders.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrder_idChanging(value);
					this.SendPropertyChanging();
					this._Order_id = value;
					this.SendPropertyChanged("Order_id");
					this.OnOrder_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Discount_id", DbType="Int NOT NULL")]
		public int Discount_id
		{
			get
			{
				return this._Discount_id;
			}
			set
			{
				if ((this._Discount_id != value))
				{
					if (this._Discounts.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDiscount_idChanging(value);
					this.SendPropertyChanging();
					this._Discount_id = value;
					this.SendPropertyChanged("Discount_id");
					this.OnDiscount_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Discounts_Orders_Discounts", Storage="_Discounts", ThisKey="Discount_id", OtherKey="Discount_id", IsForeignKey=true)]
		public Discounts Discounts
		{
			get
			{
				return this._Discounts.Entity;
			}
			set
			{
				Discounts previousValue = this._Discounts.Entity;
				if (((previousValue != value) 
							|| (this._Discounts.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Discounts.Entity = null;
						previousValue.Orders_Discounts.Remove(this);
					}
					this._Discounts.Entity = value;
					if ((value != null))
					{
						value.Orders_Discounts.Add(this);
						this._Discount_id = value.Discount_id;
					}
					else
					{
						this._Discount_id = default(int);
					}
					this.SendPropertyChanged("Discounts");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Orders_Orders_Discounts", Storage="_Orders", ThisKey="Order_id", OtherKey="Order_id", IsForeignKey=true)]
		public Orders Orders
		{
			get
			{
				return this._Orders.Entity;
			}
			set
			{
				Orders previousValue = this._Orders.Entity;
				if (((previousValue != value) 
							|| (this._Orders.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Orders.Entity = null;
						previousValue.Orders_Discounts.Remove(this);
					}
					this._Orders.Entity = value;
					if ((value != null))
					{
						value.Orders_Discounts.Add(this);
						this._Order_id = value.Order_id;
					}
					else
					{
						this._Order_id = default(int);
					}
					this.SendPropertyChanged("Orders");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Orders_Products")]
	public partial class Orders_Products : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Order_Product_id;
		
		private int _Order_id;
		
		private int _Product_id;
		
		private int _Quantity;
		
		private EntityRef<Orders> _Orders;
		
		private EntityRef<Products> _Products;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrder_Product_idChanging(int value);
    partial void OnOrder_Product_idChanged();
    partial void OnOrder_idChanging(int value);
    partial void OnOrder_idChanged();
    partial void OnProduct_idChanging(int value);
    partial void OnProduct_idChanged();
    partial void OnQuantityChanging(int value);
    partial void OnQuantityChanged();
    #endregion
		
		public Orders_Products()
		{
			this._Orders = default(EntityRef<Orders>);
			this._Products = default(EntityRef<Products>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Order_Product_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Order_Product_id
		{
			get
			{
				return this._Order_Product_id;
			}
			set
			{
				if ((this._Order_Product_id != value))
				{
					this.OnOrder_Product_idChanging(value);
					this.SendPropertyChanging();
					this._Order_Product_id = value;
					this.SendPropertyChanged("Order_Product_id");
					this.OnOrder_Product_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Order_id", DbType="Int NOT NULL")]
		public int Order_id
		{
			get
			{
				return this._Order_id;
			}
			set
			{
				if ((this._Order_id != value))
				{
					if (this._Orders.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrder_idChanging(value);
					this.SendPropertyChanging();
					this._Order_id = value;
					this.SendPropertyChanged("Order_id");
					this.OnOrder_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Product_id", DbType="Int NOT NULL")]
		public int Product_id
		{
			get
			{
				return this._Product_id;
			}
			set
			{
				if ((this._Product_id != value))
				{
					if (this._Products.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProduct_idChanging(value);
					this.SendPropertyChanging();
					this._Product_id = value;
					this.SendPropertyChanged("Product_id");
					this.OnProduct_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int NOT NULL")]
		public int Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Orders_Orders_Products", Storage="_Orders", ThisKey="Order_id", OtherKey="Order_id", IsForeignKey=true)]
		public Orders Orders
		{
			get
			{
				return this._Orders.Entity;
			}
			set
			{
				Orders previousValue = this._Orders.Entity;
				if (((previousValue != value) 
							|| (this._Orders.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Orders.Entity = null;
						previousValue.Orders_Products.Remove(this);
					}
					this._Orders.Entity = value;
					if ((value != null))
					{
						value.Orders_Products.Add(this);
						this._Order_id = value.Order_id;
					}
					else
					{
						this._Order_id = default(int);
					}
					this.SendPropertyChanged("Orders");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Products_Orders_Products", Storage="_Products", ThisKey="Product_id", OtherKey="Product_id", IsForeignKey=true)]
		public Products Products
		{
			get
			{
				return this._Products.Entity;
			}
			set
			{
				Products previousValue = this._Products.Entity;
				if (((previousValue != value) 
							|| (this._Products.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Products.Entity = null;
						previousValue.Orders_Products.Remove(this);
					}
					this._Products.Entity = value;
					if ((value != null))
					{
						value.Orders_Products.Add(this);
						this._Product_id = value.Product_id;
					}
					else
					{
						this._Product_id = default(int);
					}
					this.SendPropertyChanged("Products");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PaymentMeans")]
	public partial class PaymentMeans : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PaymentMean_id;
		
		private string _Name;
		
		private EntitySet<Payments> _Payments;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPaymentMean_idChanging(int value);
    partial void OnPaymentMean_idChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public PaymentMeans()
		{
			this._Payments = new EntitySet<Payments>(new Action<Payments>(this.attach_Payments), new Action<Payments>(this.detach_Payments));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentMean_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PaymentMean_id
		{
			get
			{
				return this._PaymentMean_id;
			}
			set
			{
				if ((this._PaymentMean_id != value))
				{
					this.OnPaymentMean_idChanging(value);
					this.SendPropertyChanging();
					this._PaymentMean_id = value;
					this.SendPropertyChanged("PaymentMean_id");
					this.OnPaymentMean_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PaymentMeans_Payments", Storage="_Payments", ThisKey="PaymentMean_id", OtherKey="PaymentMean_id")]
		public EntitySet<Payments> Payments
		{
			get
			{
				return this._Payments;
			}
			set
			{
				this._Payments.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Payments(Payments entity)
		{
			this.SendPropertyChanging();
			entity.PaymentMeans = this;
		}
		
		private void detach_Payments(Payments entity)
		{
			this.SendPropertyChanging();
			entity.PaymentMeans = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Payments")]
	public partial class Payments : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Payment_id;
		
		private double _Amount;
		
		private int _Order_id;
		
		private int _PaymentMean_id;
		
		private EntityRef<Orders> _Orders;
		
		private EntityRef<PaymentMeans> _PaymentMeans;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPayment_idChanging(int value);
    partial void OnPayment_idChanged();
    partial void OnAmountChanging(double value);
    partial void OnAmountChanged();
    partial void OnOrder_idChanging(int value);
    partial void OnOrder_idChanged();
    partial void OnPaymentMean_idChanging(int value);
    partial void OnPaymentMean_idChanged();
    #endregion
		
		public Payments()
		{
			this._Orders = default(EntityRef<Orders>);
			this._PaymentMeans = default(EntityRef<PaymentMeans>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Payment_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Payment_id
		{
			get
			{
				return this._Payment_id;
			}
			set
			{
				if ((this._Payment_id != value))
				{
					this.OnPayment_idChanging(value);
					this.SendPropertyChanging();
					this._Payment_id = value;
					this.SendPropertyChanged("Payment_id");
					this.OnPayment_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Float NOT NULL")]
		public double Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Order_id", DbType="Int NOT NULL")]
		public int Order_id
		{
			get
			{
				return this._Order_id;
			}
			set
			{
				if ((this._Order_id != value))
				{
					if (this._Orders.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrder_idChanging(value);
					this.SendPropertyChanging();
					this._Order_id = value;
					this.SendPropertyChanged("Order_id");
					this.OnOrder_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentMean_id", DbType="Int NOT NULL")]
		public int PaymentMean_id
		{
			get
			{
				return this._PaymentMean_id;
			}
			set
			{
				if ((this._PaymentMean_id != value))
				{
					if (this._PaymentMeans.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPaymentMean_idChanging(value);
					this.SendPropertyChanging();
					this._PaymentMean_id = value;
					this.SendPropertyChanged("PaymentMean_id");
					this.OnPaymentMean_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Orders_Payments", Storage="_Orders", ThisKey="Order_id", OtherKey="Order_id", IsForeignKey=true)]
		public Orders Orders
		{
			get
			{
				return this._Orders.Entity;
			}
			set
			{
				Orders previousValue = this._Orders.Entity;
				if (((previousValue != value) 
							|| (this._Orders.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Orders.Entity = null;
						previousValue.Payments.Remove(this);
					}
					this._Orders.Entity = value;
					if ((value != null))
					{
						value.Payments.Add(this);
						this._Order_id = value.Order_id;
					}
					else
					{
						this._Order_id = default(int);
					}
					this.SendPropertyChanged("Orders");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PaymentMeans_Payments", Storage="_PaymentMeans", ThisKey="PaymentMean_id", OtherKey="PaymentMean_id", IsForeignKey=true)]
		public PaymentMeans PaymentMeans
		{
			get
			{
				return this._PaymentMeans.Entity;
			}
			set
			{
				PaymentMeans previousValue = this._PaymentMeans.Entity;
				if (((previousValue != value) 
							|| (this._PaymentMeans.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PaymentMeans.Entity = null;
						previousValue.Payments.Remove(this);
					}
					this._PaymentMeans.Entity = value;
					if ((value != null))
					{
						value.Payments.Add(this);
						this._PaymentMean_id = value.PaymentMean_id;
					}
					else
					{
						this._PaymentMean_id = default(int);
					}
					this.SendPropertyChanged("PaymentMeans");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Products")]
	public partial class Products : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Product_id;
		
		private string _Name;
		
		private int _Product_Category_id;
		
		private EntitySet<Orders_Products> _Orders_Products;
		
		private EntitySet<Products_Ingredients> _Products_Ingredients;
		
		private EntitySet<Products_Relations> _Products_Relations;
		
		private EntitySet<SuppliersTransactions_Products> _SuppliersTransactions_Products;
		
		private EntityRef<Products_Categories> _Products_Categories;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProduct_idChanging(int value);
    partial void OnProduct_idChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnProduct_Category_idChanging(int value);
    partial void OnProduct_Category_idChanged();
    #endregion
		
		public Products()
		{
			this._Orders_Products = new EntitySet<Orders_Products>(new Action<Orders_Products>(this.attach_Orders_Products), new Action<Orders_Products>(this.detach_Orders_Products));
			this._Products_Ingredients = new EntitySet<Products_Ingredients>(new Action<Products_Ingredients>(this.attach_Products_Ingredients), new Action<Products_Ingredients>(this.detach_Products_Ingredients));
			this._Products_Relations = new EntitySet<Products_Relations>(new Action<Products_Relations>(this.attach_Products_Relations), new Action<Products_Relations>(this.detach_Products_Relations));
			this._SuppliersTransactions_Products = new EntitySet<SuppliersTransactions_Products>(new Action<SuppliersTransactions_Products>(this.attach_SuppliersTransactions_Products), new Action<SuppliersTransactions_Products>(this.detach_SuppliersTransactions_Products));
			this._Products_Categories = default(EntityRef<Products_Categories>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Product_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Product_id
		{
			get
			{
				return this._Product_id;
			}
			set
			{
				if ((this._Product_id != value))
				{
					this.OnProduct_idChanging(value);
					this.SendPropertyChanging();
					this._Product_id = value;
					this.SendPropertyChanged("Product_id");
					this.OnProduct_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Product_Category_id", DbType="Int NOT NULL")]
		public int Product_Category_id
		{
			get
			{
				return this._Product_Category_id;
			}
			set
			{
				if ((this._Product_Category_id != value))
				{
					if (this._Products_Categories.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProduct_Category_idChanging(value);
					this.SendPropertyChanging();
					this._Product_Category_id = value;
					this.SendPropertyChanged("Product_Category_id");
					this.OnProduct_Category_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Products_Orders_Products", Storage="_Orders_Products", ThisKey="Product_id", OtherKey="Product_id")]
		public EntitySet<Orders_Products> Orders_Products
		{
			get
			{
				return this._Orders_Products;
			}
			set
			{
				this._Orders_Products.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Products_Products_Ingredients", Storage="_Products_Ingredients", ThisKey="Product_id", OtherKey="Product_id")]
		public EntitySet<Products_Ingredients> Products_Ingredients
		{
			get
			{
				return this._Products_Ingredients;
			}
			set
			{
				this._Products_Ingredients.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Products_Products_Relations", Storage="_Products_Relations", ThisKey="Product_id", OtherKey="Product_id")]
		public EntitySet<Products_Relations> Products_Relations
		{
			get
			{
				return this._Products_Relations;
			}
			set
			{
				this._Products_Relations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Products_SuppliersTransactions_Products", Storage="_SuppliersTransactions_Products", ThisKey="Product_id", OtherKey="Product_id")]
		public EntitySet<SuppliersTransactions_Products> SuppliersTransactions_Products
		{
			get
			{
				return this._SuppliersTransactions_Products;
			}
			set
			{
				this._SuppliersTransactions_Products.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Products_Categories_Products", Storage="_Products_Categories", ThisKey="Product_Category_id", OtherKey="Product_Category_id", IsForeignKey=true)]
		public Products_Categories Products_Categories
		{
			get
			{
				return this._Products_Categories.Entity;
			}
			set
			{
				Products_Categories previousValue = this._Products_Categories.Entity;
				if (((previousValue != value) 
							|| (this._Products_Categories.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Products_Categories.Entity = null;
						previousValue.Products.Remove(this);
					}
					this._Products_Categories.Entity = value;
					if ((value != null))
					{
						value.Products.Add(this);
						this._Product_Category_id = value.Product_Category_id;
					}
					else
					{
						this._Product_Category_id = default(int);
					}
					this.SendPropertyChanged("Products_Categories");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Orders_Products(Orders_Products entity)
		{
			this.SendPropertyChanging();
			entity.Products = this;
		}
		
		private void detach_Orders_Products(Orders_Products entity)
		{
			this.SendPropertyChanging();
			entity.Products = null;
		}
		
		private void attach_Products_Ingredients(Products_Ingredients entity)
		{
			this.SendPropertyChanging();
			entity.Products = this;
		}
		
		private void detach_Products_Ingredients(Products_Ingredients entity)
		{
			this.SendPropertyChanging();
			entity.Products = null;
		}
		
		private void attach_Products_Relations(Products_Relations entity)
		{
			this.SendPropertyChanging();
			entity.Products = this;
		}
		
		private void detach_Products_Relations(Products_Relations entity)
		{
			this.SendPropertyChanging();
			entity.Products = null;
		}
		
		private void attach_SuppliersTransactions_Products(SuppliersTransactions_Products entity)
		{
			this.SendPropertyChanging();
			entity.Products = this;
		}
		
		private void detach_SuppliersTransactions_Products(SuppliersTransactions_Products entity)
		{
			this.SendPropertyChanging();
			entity.Products = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Products_Categories")]
	public partial class Products_Categories : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Product_Category_id;
		
		private string _Name;
		
		private EntitySet<Products> _Products;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProduct_Category_idChanging(int value);
    partial void OnProduct_Category_idChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Products_Categories()
		{
			this._Products = new EntitySet<Products>(new Action<Products>(this.attach_Products), new Action<Products>(this.detach_Products));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Product_Category_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Product_Category_id
		{
			get
			{
				return this._Product_Category_id;
			}
			set
			{
				if ((this._Product_Category_id != value))
				{
					this.OnProduct_Category_idChanging(value);
					this.SendPropertyChanging();
					this._Product_Category_id = value;
					this.SendPropertyChanged("Product_Category_id");
					this.OnProduct_Category_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Products_Categories_Products", Storage="_Products", ThisKey="Product_Category_id", OtherKey="Product_Category_id")]
		public EntitySet<Products> Products
		{
			get
			{
				return this._Products;
			}
			set
			{
				this._Products.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Products(Products entity)
		{
			this.SendPropertyChanging();
			entity.Products_Categories = this;
		}
		
		private void detach_Products(Products entity)
		{
			this.SendPropertyChanging();
			entity.Products_Categories = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Products_Ingredients")]
	public partial class Products_Ingredients : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Product_Ingredient_id;
		
		private int _Product_id;
		
		private int _Ingredient_id;
		
		private string _Measure_Type;
		
		private double _Amount;
		
		private EntityRef<Ingredients> _Ingredients;
		
		private EntityRef<Products> _Products;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProduct_Ingredient_idChanging(int value);
    partial void OnProduct_Ingredient_idChanged();
    partial void OnProduct_idChanging(int value);
    partial void OnProduct_idChanged();
    partial void OnIngredient_idChanging(int value);
    partial void OnIngredient_idChanged();
    partial void OnMeasure_TypeChanging(string value);
    partial void OnMeasure_TypeChanged();
    partial void OnAmountChanging(double value);
    partial void OnAmountChanged();
    #endregion
		
		public Products_Ingredients()
		{
			this._Ingredients = default(EntityRef<Ingredients>);
			this._Products = default(EntityRef<Products>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Product_Ingredient_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Product_Ingredient_id
		{
			get
			{
				return this._Product_Ingredient_id;
			}
			set
			{
				if ((this._Product_Ingredient_id != value))
				{
					this.OnProduct_Ingredient_idChanging(value);
					this.SendPropertyChanging();
					this._Product_Ingredient_id = value;
					this.SendPropertyChanged("Product_Ingredient_id");
					this.OnProduct_Ingredient_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Product_id", DbType="Int NOT NULL")]
		public int Product_id
		{
			get
			{
				return this._Product_id;
			}
			set
			{
				if ((this._Product_id != value))
				{
					if (this._Products.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProduct_idChanging(value);
					this.SendPropertyChanging();
					this._Product_id = value;
					this.SendPropertyChanged("Product_id");
					this.OnProduct_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ingredient_id", DbType="Int NOT NULL")]
		public int Ingredient_id
		{
			get
			{
				return this._Ingredient_id;
			}
			set
			{
				if ((this._Ingredient_id != value))
				{
					if (this._Ingredients.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIngredient_idChanging(value);
					this.SendPropertyChanging();
					this._Ingredient_id = value;
					this.SendPropertyChanged("Ingredient_id");
					this.OnIngredient_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Measure_Type", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Measure_Type
		{
			get
			{
				return this._Measure_Type;
			}
			set
			{
				if ((this._Measure_Type != value))
				{
					this.OnMeasure_TypeChanging(value);
					this.SendPropertyChanging();
					this._Measure_Type = value;
					this.SendPropertyChanged("Measure_Type");
					this.OnMeasure_TypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Float NOT NULL")]
		public double Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Ingredients_Products_Ingredients", Storage="_Ingredients", ThisKey="Ingredient_id", OtherKey="Ingredient_id", IsForeignKey=true)]
		public Ingredients Ingredients
		{
			get
			{
				return this._Ingredients.Entity;
			}
			set
			{
				Ingredients previousValue = this._Ingredients.Entity;
				if (((previousValue != value) 
							|| (this._Ingredients.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Ingredients.Entity = null;
						previousValue.Products_Ingredients.Remove(this);
					}
					this._Ingredients.Entity = value;
					if ((value != null))
					{
						value.Products_Ingredients.Add(this);
						this._Ingredient_id = value.Ingredient_id;
					}
					else
					{
						this._Ingredient_id = default(int);
					}
					this.SendPropertyChanged("Ingredients");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Products_Products_Ingredients", Storage="_Products", ThisKey="Product_id", OtherKey="Product_id", IsForeignKey=true)]
		public Products Products
		{
			get
			{
				return this._Products.Entity;
			}
			set
			{
				Products previousValue = this._Products.Entity;
				if (((previousValue != value) 
							|| (this._Products.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Products.Entity = null;
						previousValue.Products_Ingredients.Remove(this);
					}
					this._Products.Entity = value;
					if ((value != null))
					{
						value.Products_Ingredients.Add(this);
						this._Product_id = value.Product_id;
					}
					else
					{
						this._Product_id = default(int);
					}
					this.SendPropertyChanged("Products");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Products_Relations")]
	public partial class Products_Relations : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Product_Relation_id;
		
		private int _Product_id;
		
		private int _Quantity;
		
		private EntityRef<Products> _Products;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProduct_Relation_idChanging(int value);
    partial void OnProduct_Relation_idChanged();
    partial void OnProduct_idChanging(int value);
    partial void OnProduct_idChanged();
    partial void OnQuantityChanging(int value);
    partial void OnQuantityChanged();
    #endregion
		
		public Products_Relations()
		{
			this._Products = default(EntityRef<Products>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Product_Relation_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Product_Relation_id
		{
			get
			{
				return this._Product_Relation_id;
			}
			set
			{
				if ((this._Product_Relation_id != value))
				{
					this.OnProduct_Relation_idChanging(value);
					this.SendPropertyChanging();
					this._Product_Relation_id = value;
					this.SendPropertyChanged("Product_Relation_id");
					this.OnProduct_Relation_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Product_id", DbType="Int NOT NULL")]
		public int Product_id
		{
			get
			{
				return this._Product_id;
			}
			set
			{
				if ((this._Product_id != value))
				{
					if (this._Products.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProduct_idChanging(value);
					this.SendPropertyChanging();
					this._Product_id = value;
					this.SendPropertyChanged("Product_id");
					this.OnProduct_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int NOT NULL")]
		public int Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Products_Products_Relations", Storage="_Products", ThisKey="Product_id", OtherKey="Product_id", IsForeignKey=true)]
		public Products Products
		{
			get
			{
				return this._Products.Entity;
			}
			set
			{
				Products previousValue = this._Products.Entity;
				if (((previousValue != value) 
							|| (this._Products.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Products.Entity = null;
						previousValue.Products_Relations.Remove(this);
					}
					this._Products.Entity = value;
					if ((value != null))
					{
						value.Products_Relations.Add(this);
						this._Product_id = value.Product_id;
					}
					else
					{
						this._Product_id = default(int);
					}
					this.SendPropertyChanged("Products");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Profiles")]
	public partial class Profiles : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Profile_id;
		
		private string _Title;
		
		private EntitySet<Users> _Users;
		
		private EntitySet<Profiles_Functions> _Profiles_Functions;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProfile_idChanging(int value);
    partial void OnProfile_idChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    #endregion
		
		public Profiles()
		{
			this._Users = new EntitySet<Users>(new Action<Users>(this.attach_Users), new Action<Users>(this.detach_Users));
			this._Profiles_Functions = new EntitySet<Profiles_Functions>(new Action<Profiles_Functions>(this.attach_Profiles_Functions), new Action<Profiles_Functions>(this.detach_Profiles_Functions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Profile_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Profile_id
		{
			get
			{
				return this._Profile_id;
			}
			set
			{
				if ((this._Profile_id != value))
				{
					this.OnProfile_idChanging(value);
					this.SendPropertyChanging();
					this._Profile_id = value;
					this.SendPropertyChanged("Profile_id");
					this.OnProfile_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Profiles_Users", Storage="_Users", ThisKey="Profile_id", OtherKey="Profile_id")]
		public EntitySet<Users> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Profiles_Profiles_Functions", Storage="_Profiles_Functions", ThisKey="Profile_id", OtherKey="Profile_id")]
		public EntitySet<Profiles_Functions> Profiles_Functions
		{
			get
			{
				return this._Profiles_Functions;
			}
			set
			{
				this._Profiles_Functions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Users(Users entity)
		{
			this.SendPropertyChanging();
			entity.Profiles = this;
		}
		
		private void detach_Users(Users entity)
		{
			this.SendPropertyChanging();
			entity.Profiles = null;
		}
		
		private void attach_Profiles_Functions(Profiles_Functions entity)
		{
			this.SendPropertyChanging();
			entity.Profiles = this;
		}
		
		private void detach_Profiles_Functions(Profiles_Functions entity)
		{
			this.SendPropertyChanging();
			entity.Profiles = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Profiles_Functions")]
	public partial class Profiles_Functions : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Profile_Function_id;
		
		private int _Profile_id;
		
		private int _Function_id;
		
		private EntityRef<Functions> _Functions;
		
		private EntityRef<Profiles> _Profiles;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProfile_Function_idChanging(int value);
    partial void OnProfile_Function_idChanged();
    partial void OnProfile_idChanging(int value);
    partial void OnProfile_idChanged();
    partial void OnFunction_idChanging(int value);
    partial void OnFunction_idChanged();
    #endregion
		
		public Profiles_Functions()
		{
			this._Functions = default(EntityRef<Functions>);
			this._Profiles = default(EntityRef<Profiles>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Profile_Function_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Profile_Function_id
		{
			get
			{
				return this._Profile_Function_id;
			}
			set
			{
				if ((this._Profile_Function_id != value))
				{
					this.OnProfile_Function_idChanging(value);
					this.SendPropertyChanging();
					this._Profile_Function_id = value;
					this.SendPropertyChanged("Profile_Function_id");
					this.OnProfile_Function_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Profile_id", DbType="Int NOT NULL")]
		public int Profile_id
		{
			get
			{
				return this._Profile_id;
			}
			set
			{
				if ((this._Profile_id != value))
				{
					if (this._Profiles.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProfile_idChanging(value);
					this.SendPropertyChanging();
					this._Profile_id = value;
					this.SendPropertyChanged("Profile_id");
					this.OnProfile_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Function_id", DbType="Int NOT NULL")]
		public int Function_id
		{
			get
			{
				return this._Function_id;
			}
			set
			{
				if ((this._Function_id != value))
				{
					if (this._Functions.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFunction_idChanging(value);
					this.SendPropertyChanging();
					this._Function_id = value;
					this.SendPropertyChanged("Function_id");
					this.OnFunction_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Functions_Profiles_Functions", Storage="_Functions", ThisKey="Function_id", OtherKey="Function_id", IsForeignKey=true)]
		public Functions Functions
		{
			get
			{
				return this._Functions.Entity;
			}
			set
			{
				Functions previousValue = this._Functions.Entity;
				if (((previousValue != value) 
							|| (this._Functions.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Functions.Entity = null;
						previousValue.Profiles_Functions.Remove(this);
					}
					this._Functions.Entity = value;
					if ((value != null))
					{
						value.Profiles_Functions.Add(this);
						this._Function_id = value.Function_id;
					}
					else
					{
						this._Function_id = default(int);
					}
					this.SendPropertyChanged("Functions");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Profiles_Profiles_Functions", Storage="_Profiles", ThisKey="Profile_id", OtherKey="Profile_id", IsForeignKey=true)]
		public Profiles Profiles
		{
			get
			{
				return this._Profiles.Entity;
			}
			set
			{
				Profiles previousValue = this._Profiles.Entity;
				if (((previousValue != value) 
							|| (this._Profiles.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Profiles.Entity = null;
						previousValue.Profiles_Functions.Remove(this);
					}
					this._Profiles.Entity = value;
					if ((value != null))
					{
						value.Profiles_Functions.Add(this);
						this._Profile_id = value.Profile_id;
					}
					else
					{
						this._Profile_id = default(int);
					}
					this.SendPropertyChanged("Profiles");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Rooms")]
	public partial class Rooms : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Room_id;
		
		private string _Title;
		
		private EntitySet<Tables> _Tables;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoom_idChanging(int value);
    partial void OnRoom_idChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    #endregion
		
		public Rooms()
		{
			this._Tables = new EntitySet<Tables>(new Action<Tables>(this.attach_Tables), new Action<Tables>(this.detach_Tables));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Room_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Room_id
		{
			get
			{
				return this._Room_id;
			}
			set
			{
				if ((this._Room_id != value))
				{
					this.OnRoom_idChanging(value);
					this.SendPropertyChanging();
					this._Room_id = value;
					this.SendPropertyChanged("Room_id");
					this.OnRoom_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rooms_Tables", Storage="_Tables", ThisKey="Room_id", OtherKey="Room_id")]
		public EntitySet<Tables> Tables
		{
			get
			{
				return this._Tables;
			}
			set
			{
				this._Tables.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Tables(Tables entity)
		{
			this.SendPropertyChanging();
			entity.Rooms = this;
		}
		
		private void detach_Tables(Tables entity)
		{
			this.SendPropertyChanging();
			entity.Rooms = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Stats")]
	public partial class Stats : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Stat_id;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStat_idChanging(int value);
    partial void OnStat_idChanged();
    #endregion
		
		public Stats()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Stat_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Stat_id
		{
			get
			{
				return this._Stat_id;
			}
			set
			{
				if ((this._Stat_id != value))
				{
					this.OnStat_idChanging(value);
					this.SendPropertyChanging();
					this._Stat_id = value;
					this.SendPropertyChanged("Stat_id");
					this.OnStat_idChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Suppliers")]
	public partial class Suppliers : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Supplier_id;
		
		private string _Name;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSupplier_idChanging(int value);
    partial void OnSupplier_idChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Suppliers()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Supplier_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Supplier_id
		{
			get
			{
				return this._Supplier_id;
			}
			set
			{
				if ((this._Supplier_id != value))
				{
					this.OnSupplier_idChanging(value);
					this.SendPropertyChanging();
					this._Supplier_id = value;
					this.SendPropertyChanged("Supplier_id");
					this.OnSupplier_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SuppliersTransactions")]
	public partial class SuppliersTransactions : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SupplierTransaction_id;
		
		private EntitySet<SuppliersTransactions_Ingredients> _SuppliersTransactions_Ingredients;
		
		private EntitySet<SuppliersTransactions_Products> _SuppliersTransactions_Products;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSupplierTransaction_idChanging(int value);
    partial void OnSupplierTransaction_idChanged();
    #endregion
		
		public SuppliersTransactions()
		{
			this._SuppliersTransactions_Ingredients = new EntitySet<SuppliersTransactions_Ingredients>(new Action<SuppliersTransactions_Ingredients>(this.attach_SuppliersTransactions_Ingredients), new Action<SuppliersTransactions_Ingredients>(this.detach_SuppliersTransactions_Ingredients));
			this._SuppliersTransactions_Products = new EntitySet<SuppliersTransactions_Products>(new Action<SuppliersTransactions_Products>(this.attach_SuppliersTransactions_Products), new Action<SuppliersTransactions_Products>(this.detach_SuppliersTransactions_Products));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SupplierTransaction_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SupplierTransaction_id
		{
			get
			{
				return this._SupplierTransaction_id;
			}
			set
			{
				if ((this._SupplierTransaction_id != value))
				{
					this.OnSupplierTransaction_idChanging(value);
					this.SendPropertyChanging();
					this._SupplierTransaction_id = value;
					this.SendPropertyChanged("SupplierTransaction_id");
					this.OnSupplierTransaction_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SuppliersTransactions_SuppliersTransactions_Ingredients", Storage="_SuppliersTransactions_Ingredients", ThisKey="SupplierTransaction_id", OtherKey="SupplierTransaction_id")]
		public EntitySet<SuppliersTransactions_Ingredients> SuppliersTransactions_Ingredients
		{
			get
			{
				return this._SuppliersTransactions_Ingredients;
			}
			set
			{
				this._SuppliersTransactions_Ingredients.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SuppliersTransactions_SuppliersTransactions_Products", Storage="_SuppliersTransactions_Products", ThisKey="SupplierTransaction_id", OtherKey="SupplierTransaction_id")]
		public EntitySet<SuppliersTransactions_Products> SuppliersTransactions_Products
		{
			get
			{
				return this._SuppliersTransactions_Products;
			}
			set
			{
				this._SuppliersTransactions_Products.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SuppliersTransactions_Ingredients(SuppliersTransactions_Ingredients entity)
		{
			this.SendPropertyChanging();
			entity.SuppliersTransactions = this;
		}
		
		private void detach_SuppliersTransactions_Ingredients(SuppliersTransactions_Ingredients entity)
		{
			this.SendPropertyChanging();
			entity.SuppliersTransactions = null;
		}
		
		private void attach_SuppliersTransactions_Products(SuppliersTransactions_Products entity)
		{
			this.SendPropertyChanging();
			entity.SuppliersTransactions = this;
		}
		
		private void detach_SuppliersTransactions_Products(SuppliersTransactions_Products entity)
		{
			this.SendPropertyChanging();
			entity.SuppliersTransactions = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SuppliersTransactions_Ingredients")]
	public partial class SuppliersTransactions_Ingredients : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SupplierTransaction_Ingredient_id;
		
		private int _SupplierTransaction_id;
		
		private int _Ingredient_id;
		
		private string _Measure_Type;
		
		private double _Amount;
		
		private EntityRef<Ingredients> _Ingredients;
		
		private EntityRef<SuppliersTransactions> _SuppliersTransactions;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSupplierTransaction_Ingredient_idChanging(int value);
    partial void OnSupplierTransaction_Ingredient_idChanged();
    partial void OnSupplierTransaction_idChanging(int value);
    partial void OnSupplierTransaction_idChanged();
    partial void OnIngredient_idChanging(int value);
    partial void OnIngredient_idChanged();
    partial void OnMeasure_TypeChanging(string value);
    partial void OnMeasure_TypeChanged();
    partial void OnAmountChanging(double value);
    partial void OnAmountChanged();
    #endregion
		
		public SuppliersTransactions_Ingredients()
		{
			this._Ingredients = default(EntityRef<Ingredients>);
			this._SuppliersTransactions = default(EntityRef<SuppliersTransactions>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SupplierTransaction_Ingredient_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SupplierTransaction_Ingredient_id
		{
			get
			{
				return this._SupplierTransaction_Ingredient_id;
			}
			set
			{
				if ((this._SupplierTransaction_Ingredient_id != value))
				{
					this.OnSupplierTransaction_Ingredient_idChanging(value);
					this.SendPropertyChanging();
					this._SupplierTransaction_Ingredient_id = value;
					this.SendPropertyChanged("SupplierTransaction_Ingredient_id");
					this.OnSupplierTransaction_Ingredient_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SupplierTransaction_id", DbType="Int NOT NULL")]
		public int SupplierTransaction_id
		{
			get
			{
				return this._SupplierTransaction_id;
			}
			set
			{
				if ((this._SupplierTransaction_id != value))
				{
					if (this._SuppliersTransactions.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSupplierTransaction_idChanging(value);
					this.SendPropertyChanging();
					this._SupplierTransaction_id = value;
					this.SendPropertyChanged("SupplierTransaction_id");
					this.OnSupplierTransaction_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ingredient_id", DbType="Int NOT NULL")]
		public int Ingredient_id
		{
			get
			{
				return this._Ingredient_id;
			}
			set
			{
				if ((this._Ingredient_id != value))
				{
					if (this._Ingredients.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIngredient_idChanging(value);
					this.SendPropertyChanging();
					this._Ingredient_id = value;
					this.SendPropertyChanged("Ingredient_id");
					this.OnIngredient_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Measure_Type", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Measure_Type
		{
			get
			{
				return this._Measure_Type;
			}
			set
			{
				if ((this._Measure_Type != value))
				{
					this.OnMeasure_TypeChanging(value);
					this.SendPropertyChanging();
					this._Measure_Type = value;
					this.SendPropertyChanged("Measure_Type");
					this.OnMeasure_TypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Float NOT NULL")]
		public double Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Ingredients_SuppliersTransactions_Ingredients", Storage="_Ingredients", ThisKey="Ingredient_id", OtherKey="Ingredient_id", IsForeignKey=true)]
		public Ingredients Ingredients
		{
			get
			{
				return this._Ingredients.Entity;
			}
			set
			{
				Ingredients previousValue = this._Ingredients.Entity;
				if (((previousValue != value) 
							|| (this._Ingredients.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Ingredients.Entity = null;
						previousValue.SuppliersTransactions_Ingredients.Remove(this);
					}
					this._Ingredients.Entity = value;
					if ((value != null))
					{
						value.SuppliersTransactions_Ingredients.Add(this);
						this._Ingredient_id = value.Ingredient_id;
					}
					else
					{
						this._Ingredient_id = default(int);
					}
					this.SendPropertyChanged("Ingredients");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SuppliersTransactions_SuppliersTransactions_Ingredients", Storage="_SuppliersTransactions", ThisKey="SupplierTransaction_id", OtherKey="SupplierTransaction_id", IsForeignKey=true)]
		public SuppliersTransactions SuppliersTransactions
		{
			get
			{
				return this._SuppliersTransactions.Entity;
			}
			set
			{
				SuppliersTransactions previousValue = this._SuppliersTransactions.Entity;
				if (((previousValue != value) 
							|| (this._SuppliersTransactions.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SuppliersTransactions.Entity = null;
						previousValue.SuppliersTransactions_Ingredients.Remove(this);
					}
					this._SuppliersTransactions.Entity = value;
					if ((value != null))
					{
						value.SuppliersTransactions_Ingredients.Add(this);
						this._SupplierTransaction_id = value.SupplierTransaction_id;
					}
					else
					{
						this._SupplierTransaction_id = default(int);
					}
					this.SendPropertyChanged("SuppliersTransactions");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SuppliersTransactions_Products")]
	public partial class SuppliersTransactions_Products : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SupplierTransaction_Product;
		
		private int _SupplierTransaction_id;
		
		private int _Product_id;
		
		private string _MeasureType;
		
		private double _Amount;
		
		private EntityRef<Products> _Products;
		
		private EntityRef<SuppliersTransactions> _SuppliersTransactions;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSupplierTransaction_ProductChanging(int value);
    partial void OnSupplierTransaction_ProductChanged();
    partial void OnSupplierTransaction_idChanging(int value);
    partial void OnSupplierTransaction_idChanged();
    partial void OnProduct_idChanging(int value);
    partial void OnProduct_idChanged();
    partial void OnMeasureTypeChanging(string value);
    partial void OnMeasureTypeChanged();
    partial void OnAmountChanging(double value);
    partial void OnAmountChanged();
    #endregion
		
		public SuppliersTransactions_Products()
		{
			this._Products = default(EntityRef<Products>);
			this._SuppliersTransactions = default(EntityRef<SuppliersTransactions>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SupplierTransaction_Product", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SupplierTransaction_Product
		{
			get
			{
				return this._SupplierTransaction_Product;
			}
			set
			{
				if ((this._SupplierTransaction_Product != value))
				{
					this.OnSupplierTransaction_ProductChanging(value);
					this.SendPropertyChanging();
					this._SupplierTransaction_Product = value;
					this.SendPropertyChanged("SupplierTransaction_Product");
					this.OnSupplierTransaction_ProductChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SupplierTransaction_id", DbType="Int NOT NULL")]
		public int SupplierTransaction_id
		{
			get
			{
				return this._SupplierTransaction_id;
			}
			set
			{
				if ((this._SupplierTransaction_id != value))
				{
					if (this._SuppliersTransactions.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSupplierTransaction_idChanging(value);
					this.SendPropertyChanging();
					this._SupplierTransaction_id = value;
					this.SendPropertyChanged("SupplierTransaction_id");
					this.OnSupplierTransaction_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Product_id", DbType="Int NOT NULL")]
		public int Product_id
		{
			get
			{
				return this._Product_id;
			}
			set
			{
				if ((this._Product_id != value))
				{
					if (this._Products.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProduct_idChanging(value);
					this.SendPropertyChanging();
					this._Product_id = value;
					this.SendPropertyChanged("Product_id");
					this.OnProduct_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MeasureType", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string MeasureType
		{
			get
			{
				return this._MeasureType;
			}
			set
			{
				if ((this._MeasureType != value))
				{
					this.OnMeasureTypeChanging(value);
					this.SendPropertyChanging();
					this._MeasureType = value;
					this.SendPropertyChanged("MeasureType");
					this.OnMeasureTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Float NOT NULL")]
		public double Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Products_SuppliersTransactions_Products", Storage="_Products", ThisKey="Product_id", OtherKey="Product_id", IsForeignKey=true)]
		public Products Products
		{
			get
			{
				return this._Products.Entity;
			}
			set
			{
				Products previousValue = this._Products.Entity;
				if (((previousValue != value) 
							|| (this._Products.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Products.Entity = null;
						previousValue.SuppliersTransactions_Products.Remove(this);
					}
					this._Products.Entity = value;
					if ((value != null))
					{
						value.SuppliersTransactions_Products.Add(this);
						this._Product_id = value.Product_id;
					}
					else
					{
						this._Product_id = default(int);
					}
					this.SendPropertyChanged("Products");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SuppliersTransactions_SuppliersTransactions_Products", Storage="_SuppliersTransactions", ThisKey="SupplierTransaction_id", OtherKey="SupplierTransaction_id", IsForeignKey=true)]
		public SuppliersTransactions SuppliersTransactions
		{
			get
			{
				return this._SuppliersTransactions.Entity;
			}
			set
			{
				SuppliersTransactions previousValue = this._SuppliersTransactions.Entity;
				if (((previousValue != value) 
							|| (this._SuppliersTransactions.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SuppliersTransactions.Entity = null;
						previousValue.SuppliersTransactions_Products.Remove(this);
					}
					this._SuppliersTransactions.Entity = value;
					if ((value != null))
					{
						value.SuppliersTransactions_Products.Add(this);
						this._SupplierTransaction_id = value.SupplierTransaction_id;
					}
					else
					{
						this._SupplierTransaction_id = default(int);
					}
					this.SendPropertyChanged("SuppliersTransactions");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Tables")]
	public partial class Tables : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Table_id;
		
		private System.Nullable<double> _Height;
		
		private System.Nullable<double> _Width;
		
		private string _Shape;
		
		private int _Capacity;
		
		private int _Room_id;
		
		private EntitySet<Orders> _Orders;
		
		private EntityRef<Rooms> _Rooms;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTable_idChanging(int value);
    partial void OnTable_idChanged();
    partial void OnHeightChanging(System.Nullable<double> value);
    partial void OnHeightChanged();
    partial void OnWidthChanging(System.Nullable<double> value);
    partial void OnWidthChanged();
    partial void OnShapeChanging(string value);
    partial void OnShapeChanged();
    partial void OnCapacityChanging(int value);
    partial void OnCapacityChanged();
    partial void OnRoom_idChanging(int value);
    partial void OnRoom_idChanged();
    #endregion
		
		public Tables()
		{
			this._Orders = new EntitySet<Orders>(new Action<Orders>(this.attach_Orders), new Action<Orders>(this.detach_Orders));
			this._Rooms = default(EntityRef<Rooms>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Table_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Table_id
		{
			get
			{
				return this._Table_id;
			}
			set
			{
				if ((this._Table_id != value))
				{
					this.OnTable_idChanging(value);
					this.SendPropertyChanging();
					this._Table_id = value;
					this.SendPropertyChanged("Table_id");
					this.OnTable_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Height", DbType="Float")]
		public System.Nullable<double> Height
		{
			get
			{
				return this._Height;
			}
			set
			{
				if ((this._Height != value))
				{
					this.OnHeightChanging(value);
					this.SendPropertyChanging();
					this._Height = value;
					this.SendPropertyChanged("Height");
					this.OnHeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Width", DbType="Float")]
		public System.Nullable<double> Width
		{
			get
			{
				return this._Width;
			}
			set
			{
				if ((this._Width != value))
				{
					this.OnWidthChanging(value);
					this.SendPropertyChanging();
					this._Width = value;
					this.SendPropertyChanged("Width");
					this.OnWidthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Shape", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string Shape
		{
			get
			{
				return this._Shape;
			}
			set
			{
				if ((this._Shape != value))
				{
					this.OnShapeChanging(value);
					this.SendPropertyChanging();
					this._Shape = value;
					this.SendPropertyChanged("Shape");
					this.OnShapeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Capacity", DbType="Int NOT NULL")]
		public int Capacity
		{
			get
			{
				return this._Capacity;
			}
			set
			{
				if ((this._Capacity != value))
				{
					this.OnCapacityChanging(value);
					this.SendPropertyChanging();
					this._Capacity = value;
					this.SendPropertyChanged("Capacity");
					this.OnCapacityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Room_id", DbType="Int NOT NULL")]
		public int Room_id
		{
			get
			{
				return this._Room_id;
			}
			set
			{
				if ((this._Room_id != value))
				{
					if (this._Rooms.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoom_idChanging(value);
					this.SendPropertyChanging();
					this._Room_id = value;
					this.SendPropertyChanged("Room_id");
					this.OnRoom_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tables_Orders", Storage="_Orders", ThisKey="Table_id", OtherKey="Table_id")]
		public EntitySet<Orders> Orders
		{
			get
			{
				return this._Orders;
			}
			set
			{
				this._Orders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rooms_Tables", Storage="_Rooms", ThisKey="Room_id", OtherKey="Room_id", IsForeignKey=true)]
		public Rooms Rooms
		{
			get
			{
				return this._Rooms.Entity;
			}
			set
			{
				Rooms previousValue = this._Rooms.Entity;
				if (((previousValue != value) 
							|| (this._Rooms.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Rooms.Entity = null;
						previousValue.Tables.Remove(this);
					}
					this._Rooms.Entity = value;
					if ((value != null))
					{
						value.Tables.Add(this);
						this._Room_id = value.Room_id;
					}
					else
					{
						this._Room_id = default(int);
					}
					this.SendPropertyChanged("Rooms");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Orders(Orders entity)
		{
			this.SendPropertyChanging();
			entity.Tables = this;
		}
		
		private void detach_Orders(Orders entity)
		{
			this.SendPropertyChanging();
			entity.Tables = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Tickets")]
	public partial class Tickets : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Ticket_id;
		
		private int _Order_id;
		
		private int _Ticket_Type_id;
		
		private EntityRef<Orders> _Orders;
		
		private EntityRef<TicketTypes> _TicketTypes;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTicket_idChanging(int value);
    partial void OnTicket_idChanged();
    partial void OnOrder_idChanging(int value);
    partial void OnOrder_idChanged();
    partial void OnTicket_Type_idChanging(int value);
    partial void OnTicket_Type_idChanged();
    #endregion
		
		public Tickets()
		{
			this._Orders = default(EntityRef<Orders>);
			this._TicketTypes = default(EntityRef<TicketTypes>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ticket_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Ticket_id
		{
			get
			{
				return this._Ticket_id;
			}
			set
			{
				if ((this._Ticket_id != value))
				{
					this.OnTicket_idChanging(value);
					this.SendPropertyChanging();
					this._Ticket_id = value;
					this.SendPropertyChanged("Ticket_id");
					this.OnTicket_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Order_id", DbType="Int NOT NULL")]
		public int Order_id
		{
			get
			{
				return this._Order_id;
			}
			set
			{
				if ((this._Order_id != value))
				{
					if (this._Orders.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrder_idChanging(value);
					this.SendPropertyChanging();
					this._Order_id = value;
					this.SendPropertyChanged("Order_id");
					this.OnOrder_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ticket_Type_id", DbType="Int NOT NULL")]
		public int Ticket_Type_id
		{
			get
			{
				return this._Ticket_Type_id;
			}
			set
			{
				if ((this._Ticket_Type_id != value))
				{
					if (this._TicketTypes.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTicket_Type_idChanging(value);
					this.SendPropertyChanging();
					this._Ticket_Type_id = value;
					this.SendPropertyChanged("Ticket_Type_id");
					this.OnTicket_Type_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Orders_Tickets", Storage="_Orders", ThisKey="Order_id", OtherKey="Order_id", IsForeignKey=true)]
		public Orders Orders
		{
			get
			{
				return this._Orders.Entity;
			}
			set
			{
				Orders previousValue = this._Orders.Entity;
				if (((previousValue != value) 
							|| (this._Orders.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Orders.Entity = null;
						previousValue.Tickets.Remove(this);
					}
					this._Orders.Entity = value;
					if ((value != null))
					{
						value.Tickets.Add(this);
						this._Order_id = value.Order_id;
					}
					else
					{
						this._Order_id = default(int);
					}
					this.SendPropertyChanged("Orders");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TicketTypes_Tickets", Storage="_TicketTypes", ThisKey="Ticket_Type_id", OtherKey="TicketType_id", IsForeignKey=true)]
		public TicketTypes TicketTypes
		{
			get
			{
				return this._TicketTypes.Entity;
			}
			set
			{
				TicketTypes previousValue = this._TicketTypes.Entity;
				if (((previousValue != value) 
							|| (this._TicketTypes.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TicketTypes.Entity = null;
						previousValue.Tickets.Remove(this);
					}
					this._TicketTypes.Entity = value;
					if ((value != null))
					{
						value.Tickets.Add(this);
						this._Ticket_Type_id = value.TicketType_id;
					}
					else
					{
						this._Ticket_Type_id = default(int);
					}
					this.SendPropertyChanged("TicketTypes");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TicketTypes")]
	public partial class TicketTypes : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TicketType_id;
		
		private string _Name;
		
		private EntitySet<Tickets> _Tickets;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTicketType_idChanging(int value);
    partial void OnTicketType_idChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public TicketTypes()
		{
			this._Tickets = new EntitySet<Tickets>(new Action<Tickets>(this.attach_Tickets), new Action<Tickets>(this.detach_Tickets));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TicketType_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TicketType_id
		{
			get
			{
				return this._TicketType_id;
			}
			set
			{
				if ((this._TicketType_id != value))
				{
					this.OnTicketType_idChanging(value);
					this.SendPropertyChanging();
					this._TicketType_id = value;
					this.SendPropertyChanged("TicketType_id");
					this.OnTicketType_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TicketTypes_Tickets", Storage="_Tickets", ThisKey="TicketType_id", OtherKey="Ticket_Type_id")]
		public EntitySet<Tickets> Tickets
		{
			get
			{
				return this._Tickets;
			}
			set
			{
				this._Tickets.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Tickets(Tickets entity)
		{
			this.SendPropertyChanging();
			entity.TicketTypes = this;
		}
		
		private void detach_Tickets(Tickets entity)
		{
			this.SendPropertyChanging();
			entity.TicketTypes = null;
		}
	}
}
#pragma warning restore 1591
